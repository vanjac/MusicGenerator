/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package music;

import javax.swing.*;

/**
 *
 * @author jacob
 */
public class MusicGUI extends javax.swing.JFrame {
    Music music;
    boolean musicPlaying;

    /**
     * Creates new form MusicGUI
     */
    public MusicGUI() {
        initComponents();
        
        
        musicPlaying = false;
    }
    
    private void updateMusicSettings() {
        if(music == null) {
            return;
        }
        
        music.setMeasureLength(240000.0 / (double)((Integer)tempoSpinner.getValue()));
        
        music.setInstrument1((Integer)instrument1Spinner.getValue());
        music.setInstrument2((Integer)instrument2Spinner.getValue());
        
        
    }
    
    private void fixSpinnerRange(JSpinner spinner, int minValue, int maxValue) {
        int value = (Integer)spinner.getValue();
        if(value < minValue) {
            spinner.setValue(minValue);
        }
        if(value > maxValue) {
            spinner.setValue(maxValue);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        settingsPanel = new javax.swing.JPanel();
        tempoSpinner = new javax.swing.JSpinner();
        tempoLabel = new javax.swing.JLabel();
        instrument1Label = new javax.swing.JLabel();
        instrument1Spinner = new javax.swing.JSpinner();
        instrument2Label = new javax.swing.JLabel();
        instrument2Spinner = new javax.swing.JSpinner();
        settingsLabel = new javax.swing.JLabel();
        startStopMusic = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Music");
        setMinimumSize(new java.awt.Dimension(202, 258));
        setResizable(false);

        settingsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tempoSpinner.setToolTipText("Set the tempo in Beats per Minute");
        tempoSpinner.setValue(120);
        tempoSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tempoSpinnerStateChanged(evt);
            }
        });

        tempoLabel.setText("Tempo (BPM):");
        tempoLabel.setToolTipText("Set the tempo in Beats per Minute");

        instrument1Label.setText("Chord Instrument:");
        instrument1Label.setToolTipText("Set the instrument playing the chords");

        instrument1Spinner.setToolTipText("Set the instrument playing the chords");
        instrument1Spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                instrument1SpinnerStateChanged(evt);
            }
        });

        instrument2Label.setText("Melody Instrument:");
        instrument2Label.setToolTipText("Set the instrument playing the melody");

        instrument2Spinner.setToolTipText("Set the instrument playing the melody");
        instrument2Spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                instrument2SpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addComponent(tempoLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tempoSpinner))
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(instrument2Label)
                            .addComponent(instrument1Label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(instrument1Spinner)
                            .addComponent(instrument2Spinner, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE))))
                .addContainerGap())
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tempoLabel)
                    .addComponent(tempoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(instrument1Label)
                    .addComponent(instrument1Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(instrument2Label)
                    .addComponent(instrument2Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        settingsLabel.setText("Settings:");
        settingsLabel.setToolTipText("Settings to adjust how the music is played");

        startStopMusic.setText("Start");
        startStopMusic.setToolTipText("Start / Stop the music");
        startStopMusic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStopMusicActionPerformed(evt);
            }
        });

        statusLabel.setText("Ready");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(startStopMusic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(settingsLabel)
                            .addComponent(statusLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startStopMusic, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startStopMusicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopMusicActionPerformed
        if(!musicPlaying) {
            music = new Music();
            updateMusicSettings();
            musicPlaying = true;
            startStopMusic.setText("Stop");
            statusLabel.setText("Playing...");
            music.start();
        } else {
            musicPlaying = false;
            startStopMusic.setText("Start");
            statusLabel.setText("Ready");
            music.stopMusic();
            music = null;
        }
    }//GEN-LAST:event_startStopMusicActionPerformed

    private void tempoSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tempoSpinnerStateChanged
        fixSpinnerRange(tempoSpinner, 40, 480);
        updateMusicSettings();
    }//GEN-LAST:event_tempoSpinnerStateChanged

    private void instrument1SpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_instrument1SpinnerStateChanged
        fixSpinnerRange(instrument1Spinner, 0, 127);
        updateMusicSettings();
    }//GEN-LAST:event_instrument1SpinnerStateChanged

    private void instrument2SpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_instrument2SpinnerStateChanged
        fixSpinnerRange(instrument2Spinner, 0, 127);
        updateMusicSettings();
    }//GEN-LAST:event_instrument2SpinnerStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            System.out.println("Installed Look-and-feels:");
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                String name = info.getName();
                
                System.out.println("  " + name);
                
                if ("GTK+".equals(name) || "Windows".equals(name) || "Macintosh".equals(name)) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    //break;
                }
            }
            
            System.out.println(javax.swing.UIManager.getLookAndFeel());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MusicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MusicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MusicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MusicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MusicGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel instrument1Label;
    private javax.swing.JSpinner instrument1Spinner;
    private javax.swing.JLabel instrument2Label;
    private javax.swing.JSpinner instrument2Spinner;
    private javax.swing.JLabel settingsLabel;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JButton startStopMusic;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel tempoLabel;
    private javax.swing.JSpinner tempoSpinner;
    // End of variables declaration//GEN-END:variables
}
